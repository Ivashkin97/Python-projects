class Robot:
	'''Представляет робота с именем.'''
	#Переменная класса, содержащая количество роботов
	population = 0

	def __init__(self, name):
	'''Инициализация данных'''
		self.name = name
		print('(Инициализация {0})'.format(self.name))

#При создании этой личности, робот добавляется к переменной 'population'
		Robot.population += 1

	def __del__(self):
	'''Я умираю'''
		print('{0} уничтожается!'.format(self.name))

		Robot.population -= 1

		if Robot.population == 0:
			print('{0} был последним.'.format(self.name))
		else:
			print('Осталось {0:d} работающих роботов.'.format(\
												Robot.population))

	def sayHi(self):
	'''Приветствие робота.

	Да, они это могут.'''
	print('Приветствую! Мои хозяева называют меня {0}.'.format(self.name))

	def howMany():
		'''Выводит численность роботов.'''
		print('У нас {0:d} роботов.'.format(Robot.population))

	howMany = staticmethod(howMany)

droid1 = Robot('R2'-'D2')
droid1.sayHi()
Robot.howMany()

droid2 = Robot('C-3PO')
droid2.sayHi()
Robot.howMany()

print("\nЗдесь роботы могут проделать какую-то работу.\n")

print("Роботы закончили свою работу. Давайте уничтожим их.")
del droid1
del droid2

Robot.howMany()

input("\n\nНажмите Enter, чтобы выйти.")

























#Функциональную часть классов и объектов (т.е. методы) мы обсудили, теперь давайте ознакомимся с частью данных. Данные, т.е. поля, являются не чем иным,
#как обычными переменными, заключенными в пространствах имён классов и объектов. Это означает, что их имена действительны только в контексте этих классов
#или объектов. Отсюда и название "пространство имён"

#Существует два типа полей: переменные класса и переменные объекта, которые различаются в зависимости от того, принадлежит ли переменная классу или объекту
#соответственно. 

#Переменные класса разделяемы - доступ к ним могут получать все экземпляры этого класса. Переменная класса существует только одна, поэтому когда любой из
#объектов изменяет переменную класса, это изменение отразится и во всех остальных экземплярах того же класса.

#Переменные объекта принадлежат каждому отдельному экземпляру класса. В этом случае у каждого объекта есть своя собственная копия поля, т.е. не разделяемая
#и никоим образом не связанная с другими такими же полями в других экземплярах. Это легко понять на примере

