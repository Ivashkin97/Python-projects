import os
import time

#1. Файлы и каталоги, которые необходимо скопировать, собираются в список
source = ['"C:\\My Documents"', 'C:\\Code']
#Заметьте, что для имён, содержащих пробелы, необходимо использовать двойные кавычки внутри строки

#2. Резервные копии должны храниться в основном каталоге резерва
target_dir = 'E:\\Backup' #Подставьте ваш путь

#3. Файлы помещаются в zip-архив
#4. Текущая дата служит именем подкаталога в основном каталоге
today = target_dir + os.sep + time.strftime('%Y%m%d')

#Текущее время служит именем zip-архива

now = time.strftime('%H%M%S')

#Создаем каталог, если его еще нет
if not os.path.exists(today):
	os.mkdir(today) #создание каталога
	print('Каталог успешно создан', today)

#Имя zip-архива
target = today + os.sep + now + '.zip'

#5. Используем команду "zip" для помещения файлов в zip-архив
zip_command = "zip -qr {0} {1}".format(target, ' '.join(source))

#Запускаем создание резервной копии
if os.system(zip_command) == 0:
	print('Резервная копия успешно создана в', target)
else:
	print('создание резервной копии НЕ УДАЛОСЬ')


input("\n\nНажмите Enter, чтобы выйти.")


#Первая версия нашего сценария работает. Тем не менее, его можно улучшить так, чтобы было удобнее пользоваться в повседневной работе. Это называется
#стадией поддержки программы. Одно из улучшений, показавшееся мне полезным - это лучший механизм именования файлов: использование времени в качестве
#имени файла, сохраняющегося в каталог с текущей датой в качестве имени, который в свою очередь, расположен в главном каталоге для хранения резервных 
#копий. Первое достоинство этого состоит в том, что копии хранятся в иерархической структуре, которой легче управлять. Второе достоинство - в том, что 
#имена файлов намного короче. Третье достоинство состоит в том, что по именам каталогов можно легко определить, в какие дни создавались резервные копии,
#так как каталог создаётся только в случае резервного копирования данных в этот день