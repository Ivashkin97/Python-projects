import os
import time

#1. Файлы и каталоги, которые необходимо скопировать, собираются в список.
source = ['"C:\\My Documents"', 'C:\\Code']
#Заметьте, что для имён, содержащих пробелы, необходимо использовать двойные кавычки внутри строки

#2. Резервные копии должны храниться в основном каталоге резерва
target_dir = 'E:\\Backup' #подставьте ваш путь

#3. Файлы помещаются в zip-архив
#4. Текущая дата служит именем подкаталога в основном каталоге
today = target_dir + os.sep + time.strftime('%Y%m%d')
#Текущее время служит именем zip-архива
now = time.strftime('%H%M%S')

#Запрашиваем комментарий пользователя для имени файла
comment = input('Введите комментарий -->')
if len(comment) == 0: #проверяем, введен ли комментарий
	target = today + os.sep + now + '.zip'
else:
	target = today + os.sep + now + '_' + \
		comment.replace(' ', '_') + '.zip'

#Создаем каталог, если его еще нет
if not os.path.exists(today):
	os.mkdir(today) #создание каталога
	print('Каталог успешно создан', today)

#5. Используем команду "zip" для помещения файлов в zip-архив
zip_command = "zip -qr {0} {1}".format(target, ' '.join(source))

#Запускаем создание резервной копии
if os.system(zip_command) == 0:
	print('Резервная копия успешно создана в', target)
else:
	print('Создание резервной копии НЕ УДАЛОСЬ')


input("\n\nНажмите Enter, чтобы выйти.")

#Вторая версия уже удобнее для работы с большим количеством резервных копий. С другой стороны, когда их много, становится трудно отличить, какая
#копия для чего. Например, мы могли внести значительные изменения в какую-то программу или презентацию, и теперь хотим указать суть этих
#изменений в имени zip-архива. Этого легко можно достичь добавлением пользовательского комментария к имени zip-архива

#Примечание: следующая программа не работает, так что не переживайте, просто проследуйте по ней, так как в ней содержится урок

#Ошибка программы заключалась в том, что одна логическая строка разбита на две физические строки, но мы не указали, что эти две физические строки 
#являются частью одной. Помните, что мы можем указать, что логическая строка продолжается на следующей физической при помощи обратной наклонной черты
#в конце физической строки. (Я внес это исправление в программу). Коррекция программы при обнаружении ошибок и называется отладкой (или дебаггингом)



